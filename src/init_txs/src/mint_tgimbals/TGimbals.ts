import { YaciProvider, MeshTxBuilder, UTxO, MeshWallet, stringToHex } from "@meshsdk/core";

const blockchainProvider = new YaciProvider('http://localhost:8080/api/v1/');

async function test() {

    const wallet = new MeshWallet({
        networkId: 0, // 0: testnet, 1: mainnet
        fetcher: blockchainProvider,
        submitter: blockchainProvider,
        key: {
            type: 'root',
            bech32: 'xprv17pzm4l93vhfpatk3quujsu82yhqf8s26sus5qg5xsu6f9yjya4t3rulgr8zhcfuuxxxkc7ghtw7ajsmeq38n9yqmmxdjtw6l0ttnfypd8w2xtk0mndyxy4s8r4sx3u7yuq25eqrqhpa80xz7pc67vqqspvat45p6',
        },
    });

    //   console.log(JSON.stringify(wallet.getAddresses(), null, 2))

    const utxos = await wallet.getUtxos();
    //   console.log(JSON.stringify(utxos, null, 2))

    const collateral: UTxO = (await wallet.getCollateral())[0]!;
    const changeAddress = wallet.getChangeAddress();

    const txBuilder = new MeshTxBuilder(
        {
            fetcher: blockchainProvider,
            submitter: blockchainProvider,
            evaluator: blockchainProvider
        }
    );

    const ref_scripts_wallet = new MeshWallet({
            networkId: 0, // 0: testnet, 1: mainnet
            fetcher: blockchainProvider,
            submitter: blockchainProvider,
            key: {
                type: 'root',
                bech32: 'xprv1dzj7csxsq4umhlszd0u73ycnj3j0g0sy8uny77z9nathlw8tvpgqm67ge0jdpny9y9gkdl5kwshlv7rhr3ys25zq6gtsfqtvq82eugl23r5s0uvf6hj29rfeuaqrwqph894mt65y8r49un5py0yh8yuwt5hyk7kn',
            },
        });

    const policyId = "c43464ed1ea241c6e105b7551e696883f7ca2f7158d66808d515e12c"
    const tokenName = "TGimbals"
    const tokenNameHex = stringToHex(tokenName)
    const plutusMintingScript = "5905a85905a501000032323232323232323232323232323232323232323232323232322232325333573466e1d20c601375a0082240022a66ae71240103505435001653335734602e603a0022646464246600200600460246ae84d5d1180f001a999ab9a3018301e001132323232323232323232323232323232323232323232321233333333333300101801601401201000e00c009007005003002302c357426ae88008ccc085d710009aba10013574400466603e04840026ae84004d5d10011980f3ae357420026ae8800d4ccd5cd1813981680089919191909198008020012999ab9a302a30300011323212330010030023018357426ae88c0c0008cc061d69aba1302f00102937546ae84d5d11817001a999ab9a3028302e0011323212330010030023016357426ae88c0b8008cc059d69aba1302d00102737546ae84c0b0004098dd51aba10013574400466603003eeb4d5d08009aba20023301701c357420026ae88008ccc051d70099aba100135744004666024eb8044d5d08009aba20023301100c357420026ae88008cc03c024d5d08009aba2301e0023300d00735742603a00202e6ea8d5d0980e00080b1baa00123253335734602c00222440042a666ae68c05400401c050c068dd50009119192999ab9a301800111222001153335734602e0022642444600600860086ae84c06c00854ccd5cd180b0008891100100a980d8009baa001232533357346026603200226464246600200600460086ae84d5d1180c80118081aba130180010123754002464a666ae68c048c0600044c8c8c8c8c8c8c8c8c848cccc00402401c00c008cc02dd71aba135744008a666ae68c06c0044c84888c008010d5d0980f0010a999ab9a301a00113212223001004375c6ae84c07800854ccd5cd180c8008891100180c180f0009baa357420026ae88008ccc025d70041aba1001357446032006a666ae68c04cc0640044c8c848cc00400c008cc01403cd5d09aba23019002300f3574260300020246ea8d5d0980b8008089baa001223232533357346026002264244600400660086ae84c06000854ccd5cd180a000802809180c0009baa00111220013300175ceb4888cc04c88cccd55cf8009004119191919806891980080180118031aba20053007301900230073019001357420040106eac00488cc04488cccd55cf800900311980418029aba100230033574400400c6eb00044880084800488488cc00401000c8c8c94ccd5cd180680089909111180200298021aba1300f002153335734601800226424444600400a600a6ae84c03c00854ccd5cd180580089909111180080298039aba1300f002153335734601400226424444600600a6eb8d5d0980780100498078009baa001232325333573466e1d200c00111222222200315333573466e1d200a00111222222200415333573466e1d2008001132321222222233001009008375a6ae84d5d118078019bae35742601c0042a666ae68c0300044c8c848888888cc008024020dd71aba135744601e0066eb8d5d098070010a999ab9a300b001132321222222233006009008375c6ae84d5d1180780198021aba1300e002153335734601400226424444444600e01060086ae84c03800854ccd5cd180480089909111111180280418021aba1300e002008300e001375400246464a666ae68c0240044c8c8c8c8488ccc00401801000cdd69aba1357440046eb4d5d08009aba2300e003375a6ae84c03400854ccd5cd1804000899091180100198021aba1300d002007300d001375400246464a666ae68c0200044c8488c00400cdd71aba1300c002153335734600e00226424460040066eb8d5d0980600100318060009baa00123253335734600a60160022646424660020060046eb4d5d09aba2300b00230033574260140020086ea80048c94ccd5cd1802180500089bae3574260120020066ea800454cd5ce249035054310016370e90001b8748008dc3a40086e1d20062323001001223300330020020015573caae75"
    const redeemerJson = {"int":99}

    const unsignedTx = await txBuilder
        .mintPlutusScriptV2()
        .mint("1000", policyId, tokenNameHex)
        .mintingScript(plutusMintingScript)
        .mintRedeemerValue(redeemerJson, "JSON")
        .txOut(ref_scripts_wallet.getAddresses().baseAddressBech32!, [{ unit: policyId+tokenNameHex, quantity: '1000' }])
        .changeAddress(changeAddress)
        .selectUtxosFrom(utxos)
        .txInCollateral(
            collateral.input.txHash,
            collateral.input.outputIndex,
            collateral.output.amount,
            collateral.output.address,
        )
        .complete();

    console.log(unsignedTx)

    const signedTx = await wallet.signTx(unsignedTx)
    const txHash = await wallet.submitTx(signedTx)

    console.log(txHash)

    await new Promise(resolve => setTimeout(resolve, 3000));

    const new_utxos = await wallet.getUtxos();
    console.log(JSON.stringify(new_utxos, null, 2))
}

test().catch(console.error);