import { YaciProvider, MeshTxBuilder, UTxO, MeshWallet, stringToHex } from "@meshsdk/core";

const blockchainProvider = new YaciProvider('http://localhost:8080/api/v1/');

async function test() {

    const wallet = new MeshWallet({
        networkId: 0, // 0: testnet, 1: mainnet
        fetcher: blockchainProvider,
        submitter: blockchainProvider,
        key: {
            type: 'root',
            bech32: 'xprv17pzm4l93vhfpatk3quujsu82yhqf8s26sus5qg5xsu6f9yjya4t3rulgr8zhcfuuxxxkc7ghtw7ajsmeq38n9yqmmxdjtw6l0ttnfypd8w2xtk0mndyxy4s8r4sx3u7yuq25eqrqhpa80xz7pc67vqqspvat45p6',
        },
    });

    //   console.log(JSON.stringify(wallet.getAddresses(), null, 2))

    const utxos = await wallet.getUtxos();
    //   console.log(JSON.stringify(utxos, null, 2))

    const collateral: UTxO = (await wallet.getCollateral())[0]!;
    const changeAddress = wallet.getChangeAddress();

    const txBuilder = new MeshTxBuilder(
        {
            fetcher: blockchainProvider,
            submitter: blockchainProvider,
            evaluator: blockchainProvider
        }
    );

    const ref_scripts_wallet = new MeshWallet({
            networkId: 0, // 0: testnet, 1: mainnet
            fetcher: blockchainProvider,
            submitter: blockchainProvider,
            key: {
                type: 'root',
                bech32: 'xprv1dzj7csxsq4umhlszd0u73ycnj3j0g0sy8uny77z9nathlw8tvpgqm67ge0jdpny9y9gkdl5kwshlv7rhr3ys25zq6gtsfqtvq82eugl23r5s0uvf6hj29rfeuaqrwqph894mt65y8r49un5py0yh8yuwt5hyk7kn',
            },
        });

    const policyId = "f50d93bd52f2fdc14f1b808da78bf107f13e8a8a1579f98e381212b8"
    const tokenName = "SidechainDecider"
    const tokenNameHex = stringToHex(tokenName)
    const plutusMintingScript = "59071b5907180100003232323232323232323232323232323232323232323232323232323232323232223232323253355335533533355330242211222533500113500301e2213335005022300400233355300702500500400101e12330012233300a01e0020010022325333573466e3cd40040752201201dbd31877dbe6662f42e8f4838481781f62912d9b2581fb3cb8e39a84dac6d57001333573466e1d20023500101b01c01a0193500101c3500222222222222200c01613357389201115554784f206e6f7420636f6e73756d65640001815335533533302422253350011002221350022233007333302b222253350011002221350022253335734605e002266601000e00c006266601000e660562466600201000600400c00600400c0020060346a00444444444444401002e4426a004444a66a0082a666ae68cdc780124411053696465636861696e446563696465720013335734604c00203e03a0384403c02c266ae712411377726f6e6720616d6f756e74206d696e7465640001801701d1533573892103505435001630060183553335734603c60480042646464246600200600460206ae84d5d118128022999ab9a301f3025001132323232323232323232323232323232323232323232321233333333333300101801601401201000e00c009007005003002302a357426ae88008ccc089d710009aba10013574400466604004440026ae84004d5d10011980fbae357420026ae8800d4ccd5cd1817181a00089919191909198008020012999ab9a30313037001132321233001003002301a357426ae88c0dc008cc069d69aba1303600103037546ae84d5d1181a801a999ab9a302f30350011323212330010030023018357426ae88c0d4008cc061d69aba1303400102e37546ae84c0cc0040b4dd51aba10013574400466603203aeb4d5d08009aba20023301801a357420026ae88008ccc055d700a1aba100135744004666026eb8048d5d08009aba20023301200e357420026ae88008cc04002cd5d08009aba230250023300e00935742604800203c6ea8d5d0981180100e80ca999ab9a301d302337540060340386ea80048cc004894cd400804840040488c94ccd5cd180d8008080a999ab9a301a001011019301f3754002446464a666ae68c0740044488800454ccd5cd180e0008990911180180218021aba1302000215333573460360022244400403460400026ea80048c94ccd5cd180c180f00089919091980080180118021aba135744603c00460186ae84c07400405cdd50009192999ab9a3017301d00113232323232323232321233330010090070030023300b75c6ae84d5d10022999ab9a3020001132122230020043574260460042a666ae68c07c0044c84888c004010dd71aba13023002153335734603c0022244400603a60460026ea8d5d08009aba200233300875c00e6ae84004d5d1180f001a999ab9a3018301e0011323212330010030023300500b357426ae88c078008c02cd5d0980e80080b9baa35742603800202c6ea800488c8c94ccd5cd180c000899091180100198021aba1301d002153335734603200201e02e603a0026ea8004cc005d73ad222330192233335573e002402446464646602e2466002006004600c6ae88014c01cc07c008c01cc07c004d5d080100a9bab00122330172233335573e0024020466024600a6ae84008c00cd5d10010099bac0012323253335734602c00226424444600800a60086ae84c06000854ccd5cd180a80089909111180100298029aba13018002153335734602800226424444600200a600e6ae84c06000854ccd5cd18098008990911118018029bae35742603000402460300026ea80048c8c94ccd5cd19b874803000444888888800c54ccd5cd19b874802800444888888801054ccd5cd19b87480200044c8c848888888cc004024020dd69aba13574460300066eb8d5d0980b8010a999ab9a3015001132321222222233002009008375c6ae84d5d1180c0019bae35742602e0042a666ae68c0500044c8c848888888cc018024020dd71aba135744603000660086ae84c05c00854ccd5cd180980089909111111180380418021aba13017002153335734602400226424444444600a01060086ae84c05c008044c05c004dd5000919192999ab9a3012001132323232122333001006004003375a6ae84d5d10011bad357420026ae88c05c00cdd69aba130160021533357346022002264244600400660086ae84c058008040c058004dd5000919192999ab9a30110011321223001003375c6ae84c05400854ccd5cd180800089909118010019bae35742602a00401e602a0026ea80048c94ccd5cd1807180a0008991909198008018011bad357426ae88c050008c00cd5d098098008069baa00123253335734601a602600226eb8d5d098090008061baa001100410011001220011001220022212233001004003100112001153357389201035054310016370e90001b8748008dc3a40086e1d20062323001001223300330020020015573caae75"
    const redeemerJson = {"constructor":0,"fields":[]}

    const unsignedTx = await txBuilder
        .mintPlutusScriptV2()
        .mint("1", policyId, tokenNameHex)
        .mintingScript(plutusMintingScript)
        .mintRedeemerValue(redeemerJson, "JSON")
        .txOut(ref_scripts_wallet.getAddresses().baseAddressBech32!, [{ unit: policyId+tokenNameHex, quantity: '1' }])
        .changeAddress(changeAddress)
        .selectUtxosFrom(utxos)
        .txInCollateral(
            collateral.input.txHash,
            collateral.input.outputIndex,
            collateral.output.amount,
            collateral.output.address,
        )
        .complete();

    console.log(unsignedTx)

    const signedTx = await wallet.signTx(unsignedTx)
    const txHash = await wallet.submitTx(signedTx)

    console.log(txHash)

    await new Promise(resolve => setTimeout(resolve, 3000));

    const new_utxos = await wallet.getUtxos();
    console.log(JSON.stringify(new_utxos, null, 2))
}

test().catch(console.error);